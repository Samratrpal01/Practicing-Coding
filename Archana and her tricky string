Archana is very fond of strings.  Help her to solve a problem. The problem is as follows:-
Given is a string of length L. Her task is to find the longest string from the given string with characters arranged in descending order of their ASCII code and in arithmetic progression. She wants the common difference should be as low as possible(at least 1) and the characters of the string to be of higher ASCII value. 

Example 1:

Input:
s = "ABCPQR"
Output: "RQP"
Explanation: Two strings of maximum length
             are possible- “CBA” and “RPQ”.
             But he wants the string to be 
             of higher ASCII value 
             therefore, the output is “RPQ”.
Example 2:

Input:
s = "ADGJPRT"
Output: "JGDA"
Explanation: The String of maximum length
             is “JGDA”.
User Task:
Your task is to complete the function findString() which takes a single argument(string s) and returns the answer. You need not take any input or print anything.

Expected Time Complexity: O(|s|)
Expected Auxiliary Space: O(number of distinct alphabets)

Constraints:
3 <= L <= 1000
A <= s[i] <= Z
The string contains minimum three different characters.

Codes Are:-
string findString(string s){
  int i,j,k,o,t=0,ans,u,w1,p=0,q=0,w2;

    u=-1;
    int l=s.length();
    int n[26];
    memset(n,0,sizeof n);
    int n2[12][2];
    memset(n2,0,sizeof n2);
    for(j=0;j<l;j++)
    {
        p=s[j]-65;
        n[p]++;
    }
    ans=0;
    w2=-1;
    for(j=1;j<=12;j++)
    {
        for(k=25;k>=25-j+1;k--)
        {
            t=0;w1=0;
            for(o=k;o>=0;o-=j)
            {
                if(n[o]>0 && t==0)
                {
                    p=o;t=1;q=o;w1++;
                }
                else if(n[o]>0)
                {
                    q=o;w1++;
                }
                else
                {
                    t=0;w1=0;
                }
                if(w1>w2)
                {
                    n2[j-1][0]=q;n2[j-1][1]=p;w2=w1;
                }
            }
        }
        if((n2[j-1][1]-n2[j-1][0])/j+1>u)
        {
            u=(n2[j-1][1]-n2[j-1][0])/j+1;
            ans=j;
        }
    }
    string res = "";
    for(j=n2[ans-1][1];j>=n2[ans-1][0];j-=ans)
        res+=(j+'A');
   
	return res;
    
}
