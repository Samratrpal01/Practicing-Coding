Given a String s, count all special palindromic substrings of size greater than 1. A Substring is called special palindromic substring if all the characters in the substring are same or only the middle character is different for odd length. Example “aabaa” and “aaa” are special palindromic substrings and “abcba” is not a special palindromic substring.

 

Example 1:

Input: 
S = "abab"
Output: 2
Explanation: All Special Palindromic substring
             size > 1 are : "aba", "bab"
 

Example 2:

Input:
S = "aaba"
Output: 2
Explanation: All Special Palindromic substring
             size > 1 are: "aa", "aba".
 

User Task:
Your task is to complete the function CountSpecialPalindrome() which takes a single argument(string str) and returns the count of special palindromic substrings. You need not take any input or print anything.

 
 Codes Are:-
 long long int CountSpecialPalindrome(string str){
    int n = str.length();
 
  
    int result = 0;
 
   
    int sameChar[n] = { 0 };
 
    int i = 0;
 
 
    while (i < n) {
 
        
        int sameCharCount = 1;
 
        int j = i + 1;
 
        
        while (str[i] == str[j] && j < n)
            sameCharCount++, j++;
 
        
        result += (sameCharCount * (sameCharCount + 1) / 2);
 
        
        sameChar[i] = sameCharCount;
 
        
        i = j;
    }
 
   
    for (int j = 1; j < n; j++)
    {
        if (str[j] == str[j - 1])
            sameChar[j] = sameChar[j - 1];
 
        if (j > 0 && j < (n - 1) &&
            (str[j - 1] == str[j + 1] &&
             str[j] != str[j - 1]))
            result += min(sameChar[j - 1],
                          sameChar[j + 1]);
    }
 
   
    return result - n;
    
}
