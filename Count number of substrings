Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. 


Example 1:

Input:
S = "aba", K = 2
Output:
3
Explanation:
The substrings are:
"ab", "ba" and "aba".
Example 2:

Input: 
S = "abaaca", K = 1
Output:
7
Explanation:
The substrings are:
"a", "b", "a", "aa", "a", "c", "a". 

Codes Are:-
long long int atMostK(string& A, int K) {
  long long int i = 0, res = 0;
  int count[26]={0};
  for (long long int j = 0; j < A.size(); ++j) {
    if (!count[A[j]-97]++) K--;
    while (K < 0) {
    if (!--count[A[i]-97]) K++;
    i++;
  }
  res += j - i + 1;
  }
  return res;
  }
public:
long long int substrCount (string s, int k)
{
  return atMostK(s,k)-atMostK(s,k-1);
}
