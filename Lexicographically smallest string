Given a string S consisting of only lowercase characters. Find the lexicographically smallest string after removing k characters from the string. But you have to correct the value of k, i.e., if the length of the string is a power of 2, reduce k by half, else multiply k by 2.
NOTE: If it is not possible to remove k (the value of k after correction) characters or if the resulting string is empty return -1.

Example 1:

Input: S = "fooland", k = 2
Output: "and" 
Explanation: As the size of the string = 7
which is not a power of 2, hence k = 4.
After removing 4 characters from the given 
string, the lexicographically smallest
string is "and".
Example 2:

Input: S = "code", k = 4
Output: "cd"
Explanation: As the length of the string = 4, 
which is 2 to the power 2, hence k = 2.
Hence, lexicographically smallest string after 
removal of 2 characters is "cd".

Your Task:  
You dont need to read input or print anything. Complete the function lexicographicallySmallest() which takes S and k as input parameters and returns the lexicographically smallest string after removing k characters.

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n)

Codes Are:-
class Solution {
  public:
    string lexicographicallySmallest(string S, int k) {
      stack<char>s;
int n = S.length() ;
int c = 0;
for(int i = 0; i < 10; i++)
c +=((n>>i)&1);

if(c==1)
k/=2;
else
k*=2;
if(k >= n)
return "-1";

string x = S;sort(x.begin() , x.end());
if(S==x)
return S.substr(0 , n - k);

for(int i = 0 ; i < n ; i++)
{
if(s.empty() || s.top() <= S[i])
s.push(S[i]);
else
{
while(!s.empty() && s.top() > S[i] && k>0)
k--, s.pop();
s.push(S[i]);
}
}
x = "";
while(k > 0 && !s.empty())
s.pop() , k--;
while(!s.empty())
x.push_back(s.top()) , s.pop();
reverse(x.begin() , x.end());
return x;


    }
};
