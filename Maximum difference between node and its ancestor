Given a Binary Tree, you need to find the maximum value which you can get by subtracting the value of node B from the value of node A, where A and B are two nodes of the binary tree and A is an ancestor of B. 

Example 1:

Input:
    5
 /    \
2      1
Output: 4
Explanation:The maximum difference we can
get is 4, which is bewteen 5 and 1.
Example 2:

Input:
      1
    /    \
   2      3
           \
            7
Output: -1
Explanation:The maximum difference we can
get is -1, which is between 1 and 2.
Your Task:
The task is to complete the function maxDiff() which finds the maximum difference between the node and its ancestor.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(H).
Note: H is the height of the tree.

Codes Are:-
int maxDUtil(Node* root, int& max_diff)
{
    if(!root)
        return INT_MAX ;
    if(!root->left && !root->right)
        return root->data ;
    int left = maxDUtil(root->left,max_diff) ;
    int right = maxDUtil(root->right,max_diff) ;
    max_diff = max(max_diff,root->data-min(left,right)) ;
    return min(min(left,right),root->data) ;
}
int maxDiff(Node* root)
{
    int max_diff = INT_MIN ;
    maxDUtil(root,max_diff) ;
    return max_diff ;
}
