Given an integer N. The task is to count the number of integers from 1 to N(inclusive) which contain 0’s as a digit.


Example 1:

Input: N = 21
Output: 2
Explanation: All numbers are 10,20.

â€‹Example 2:

Input: N = 101
Output: 11
Explanation: All numbers are 10,20
30,40,50,60,70,80,90,100,101.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function countZero() which takes N as inputs and returns the answer.

Expected Time Complexity: O(log N)
Expected Auxiliary Space: O(1)

Codes Are:-
int zeroUpto(int digits) { 
        
        int first = (pow(10,digits)-1)/9; 
        int second = (pow(9,digits)-1)/8; 
        return 9 * (first - second); 
    } 
      
    
    int toInt(char c)  { 
        return int(c)-48; 
    } 
      
   
    int countZero(int n) { 
        string num = to_string(n);
        int k = num.length(); 
      
          int total = zeroUpto(k-1); 
      
         
        int non_zero = 0; 
        for (int i=0; i<num.length(); i++) 
        { 
            
            if (num[i] == '0') 
            { 
                non_zero--; 
                break; 
            } 
      
            
            non_zero += (toInt(num[i])-1) * (pow(9,k-1-i)); 
        } 
      
        int no = 0, remaining = 0,calculatedUpto=0; 
      
        
        for (int i=0; i<num.length(); i++) 
        { 
            no = no*10 + (toInt(num[i])); 
            if (i != 0) 
                calculatedUpto = calculatedUpto*10 + 9; 
        } 
        remaining = no-calculatedUpto; 
      
        
        int ans = zeroUpto(k-1) + (remaining-non_zero-1); 
        return ans; 
    }
