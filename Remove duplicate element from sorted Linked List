Given a singly linked list consisting of N nodes. The task is to remove duplicates (nodes with duplicate values) from the given list (if exists).
Note: Try not to use extra space. Expected time complexity is O(N). The nodes are arranged in a sorted way.

Example 1:

Input:
LinkedList: 2->2->4->5
Output: 2 4 5
Explanation: In the given linked list 
2 ->2 -> 4-> 5, only 2 occurs more 
than 1 time.
Example 2:

Input:
LinkedList: 2->2->2->2->2
Output: 2
Explanation: In the given linked list 
2 ->2 ->2 ->2 ->2, 2 is the only element
and is repeated 5 times.
Your Task:
The task is to complete the function removeDuplicates() which should remove the duplicates from linked list and return the head of the linkedlist.

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)

Codes Are:-
void insert(Node* &temp,int data,Node* &head)
{
    if(temp==NULL)
    {
        Node* tmp=new Node(data);
        head=tmp;
        temp=tmp;
    }
    else
    {
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        
        Node* tmp=new Node(data);
        temp->next=tmp;
    }
}

Node *removeDuplicates(Node *head)
{
     map<int,int>mp;
    Node* temp=head;
    while(temp)
    {
        mp[temp->data]++;
        temp=temp->next;
    }
    
    Node* h=NULL;
    temp=NULL;
    for(auto i:mp)
    {
        insert(temp,i.first,h);
    }
    return h;
}
