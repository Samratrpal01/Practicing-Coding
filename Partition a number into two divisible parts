Given a number (as string) and two integers a and b, divide the string in two non-empty parts such that the first part is divisible by a and the second part is divisible by b. In case multiple answers exist, return the string such that the first non-empty part has minimum length.

 

Example 1:

Input:
1200 4 3
Output:
12 00
Explanation:
12 is divisible by 4, and
00 is divisible by 3.
 

Example 2:

Input: 
125 12 5
Output: 
12 5
Explanation: 
12 is divisible by 12, and 
5 is divisible by 5.
 

Your Task:

You don't need to read input or print anything. Your task is to complete the function stringPartition() which takes the string S and returns a string which will be in the form of first sub-string + " " (Single Space) + second sub-string. If not found return -1 as a string.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Code Are:-
#include<bits/stdc++.h> 
using namespace std; 

 // } Driver Code Ends
class Solution{   
public:
    string stringPartition(string S, int a, int b){
      int len = S.length();
    	vector<int> lr(len+1, 0);
    	lr[0] = (S[0] - '0')%a;
    	for (int i=1; i<len; i++)
    		lr[i] = ((lr[i-1]*10)%a + (S[i]-'0'))%a;
    		
       
    
    	vector<int> rl(len+1, 0);
    	rl[len-1] = (S[len-1] - '0')%b;
    	int power10 = 10;
    	for (int i= len-2; i>=0; i--)
    	{
    		rl[i] = (rl[i+1] + (S[i]-'0')*power10)%b;
    		power10 = (power10 * 10) % b;
    	}
        string ans="";
      

    	for (int i=0; i<len-1; i++)
    	{   
    	    // If split is not possible at this point 
    		if (lr[i] != 0)
    			continue;
    			
    	    // We can split at i if one of the following 
            // two is true. 
            // a) All charactes after S[i] are 0 
            // b) after S[i] is divisible by b, i.e., 
            // S[i+1..n-1] is divisible by b. 
            
    		if (rl[i+1] == 0)
    		{
    			for (int k=0; k<=i; k++)
    				ans+=S[k];
    			ans+=" ";
    			for (int k=i+1; k<len; k++)
    				ans+=S[k];
    			return ans;
    		}
    	}
    	cout<<"-1";
    }
};


int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {   
        int a,b;
        string S;
        cin >> S >> a >> b;
        Solution ob;
        cout << ob.stringPartition(S,a,b) << endl;
    }
    return 0; 
}
