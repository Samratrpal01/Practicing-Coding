Find the number of ways in which N coins can be distributed among K pupils such that each pupil receives at least one coin each. Two distributions are said to be different only if they have at least one pupil who got a different number of coins.
 

Example 1:

Input: N = 7, K = 3
Output: 15
Explanation: 
Coin distribution can be any of the following 15 ways. 
{1,1,5}, {1,5,1}, {5,1,1}, {2,1,4}, {1,2,4}, {1,4,2}
{2,4,1}, {4,1,2}, {4,2,1}, {3,1,3}, {1,3,3}, {3,3,1}
{2,2,3}, {2,3,2}, {3,2,2}


Example 2:

Input: N = 5, K = 5
Output: 1
Explanation: {1, 1, 1, 1, 1} is the only way.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function totalWays() which takes N and K as input parameters and returns the number of possible distributions modulo 10^9+7.
 

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)


Codes:-
#include<bits/stdc++.h>
using namespace std;

class Solution{
	public:
    long long int mod = 1000000007;
	long long int powerMod(long long int base,long long int pow)
	{
	    long long int  ans=1;
	    while(pow>0){
	        if(pow%2!=0)
	            ans=(ans*base)%mod;
	        pow/=2;
	        base=(base*base)%mod;
	    }
	    return ans;
	}
	long long int  inverse_mod(long long int  a,long long int b)
	{
	    return (a*powerMod(b,mod-2))%mod;
	}
    int totalWays(int n, int k) {
    	n--,k--;
    	if(k > n)
    		return 0;
    	long long int fact[n+1];
    	// Calculating factorial
    	fact[0] = 1;
    	fact[1] = 1;
    	for(long long int  i = 2; i <= n; i++){
    		fact[i] = ((fact[i-1] % mod) * (i % mod))%mod;
    	}
    	// calulating nCr
    	long long int ans = 1;
    	ans = fact[n];
    	long long int r = (fact[k] % mod * fact[n-k] % mod)%mod;
    	ans = inverse_mod(ans, r);
    	return int(ans);
    }
};


int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n , k;
		cin >> n >> k;
		Solution ob;
		int ans = ob.totalWays(n, k);
		cout << ans << "\n";
	}  
	return 0;
} 
