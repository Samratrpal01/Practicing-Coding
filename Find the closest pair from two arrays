Given two sorted arrays and a number x, find the pair whose sum is closest to x and the pair has an element from each array. In the case of multiple closest pairs return the smallest one.


Example 1:

Input : arr[ ] = {1, 4, 5, 7}
brr[ ] = {10, 20, 30, 40} 
X = 32
Output : 1 30
Explanation:
The closest pair whose sum is closest
to 32 is {1, 30} = 31.
Example 2:

Input : arr[ ] = {1, 4, 5, 7}
brr[ ] = {10, 20, 30, 40}
X = 50 
Output :  7 40 

Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function printClosest() that takes an array (arr), another array (brr), size of array arr (N), size of array brr (M), and return the array of two integers whose sum is closest to X. The driver code takes care of the printing.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Codes Are:-

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//User function teamplate for C++

class Solution{
  public:
    vector<int> printClosest(int arr[], int brr[], int n, int m, int x) {
       sort( arr, arr+n );
        sort( brr, brr+m );
        
        int res_l=0 ,  res_r=m-1 , l=0 ,r=m-1;
        int diff = abs( arr[l] + brr[r] - x );
        
        while(  l<n && r>=0 ){
            if(  abs( arr[l] + brr[r] - x ) < diff ){
                res_l = l;
                res_r = r;
                diff = abs( arr[l] + brr[r] - x );
            }
            if( arr[l]+brr[r] > x ){
                --r;
            }
            else{
                ++l;
            }
        }
        return {arr[res_l],brr[res_r]};
    }
};

// { Driver Code Starts.

int main()
{
	int t;
	cin>>t;
	int m,n,x;
	while(t--)
    {
        cin>>n>>m;
        int a[n],b[m];
        
        for(int i=0;i<n;i++)
            cin>>a[i];
            
        for(int i=0;i<m;i++)
            cin>>b[i];
            
        cin>>x;
        
        vector<int> ans;
        Solution ob;
        ans = ob.printClosest(a, b, n, m, x);
        cout << ans[0] << " " << ans[1] << endl;
        
    }
    return 0;
}
 
