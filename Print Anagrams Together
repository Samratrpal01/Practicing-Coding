Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.


Example 1:

Input:
N = 5
words[] = {act,god,cat,dog,tac}
Output:
act cat tac 
god dog
Explanation:
There are 2 groups of
anagrams "god", "dog" make group 1.
"act", "cat", "tac" make group 2.
Example 2:

Input:
N = 3
words[] = {no,on,is}
Output: 
no on
is
Explanation:
There are 2 groups of
anagrams "no", "on" make group 1.
"is" makes group 2. 

Codes Are:-
vector<vector<string> > Anagrams(vector<string>& list) {
       unordered_map<string,vector<string>> mp;
       
       for(int i = 0; i < list.size(); i++){
           string curr = list[i];
           sort(curr.begin() , curr.end());
           mp[curr].push_back(list[i]);
       }
       
       vector<vector<string>> ans;
       
       for(auto it: mp){
           ans.push_back(it.second);
       }
       return ans;
    }
