You are given a binary tree. Your task is pretty straightforward. You have to find the sum of the product of each node and its mirror image (The mirror of a node is a node which exists at the mirror position of the node in opposite subtree at the root.). Donâ€™t take into account a pair more than once. The root node is the mirror image of itself.

 

Example 1:

Input:
      4         
    /    \
   5      6
Output:
46
Explanation:
Sum = (4*4) + (5*6) = 46
Example 2:

Input:
                       1                 
                   /        \
                 3            2
                  /  \         /  \
              7     6       5    4
            /   \    \     /  \    \
          11    10    15  9    8    12
Output:
332
Explanation:
Sum = (1*1) + (3*2) + (7*4) + (6*5) + (11*12) + (15*9) = 332
 

Your Task:
You need to complete the function imgMultiply() that takes root as parameter and returns the required sum.The answer may be very large, compute the answer modulo 109 + 7.


Expected Time Complexity: O(Number of nodes).
Expected Auxiliary Space: O(Height of the Tree).

Codes Are:-
 long mod = 1e9+7;
    void helper(Node *root1, Node *root2, long long &mul){
        if(!root1 || !root2)
            return;
        mul += ((root1->data)*(root2->data))%mod;
        helper(root1->left, root2->right, mul);
        helper(root1->right, root2->left, mul);
    }
    long long imgMultiply(Node *root)
    {
        long long mul = root->data * root->data;
        helper(root->left, root->right, mul);
        return mul%mod;
    }
