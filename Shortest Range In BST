Given a BST (Binary Search Tree), find the shortest range [x, y], such that, at least one node of every level of the BST lies in the range.
If there are multiple ranges with the same gap (i.e. (y-x)) return the range with the smallest x.

Example 1:

Input:
              8
          /   \
         3     10
       /  \      \
      2    6      14
          / \     /
         4   7   12
                /  \
               11   13
Output: 6 11
Explanation: Level order traversal of the tree 
is [8], [3, 10], [2, 6, 14], [4, 7, 12], [11, 13]. 
The shortest range which satisfies the above 
mentioned condition is [6, 11]. 

Codes Are:-
pair<int, int> shortestRange(Node *root) {
    unordered_map<int, vector<int>> nums;
    queue<pair<Node*, int>> q;
    q.push({root, 0});
    while (!q.empty()) {
        auto x = q.front(); q.pop();
        nums[x.second].push_back(x.first->data);
        if (x.first->left)q.push({x.first->left, x.second + 1});
        if (x.first->right)q.push({x.first->right, x.second + 1});
    }
    int k = nums.size(), ans = 1e9;
    pair<int, int> range = { -1e9, 1e9};
    vector<int> ptr(k, 1);
    multiset<array<int, 2>> s;
    for (int i = 0; i < k; i++)s.insert({nums[i][0], i});
    while (1) {
        auto x = *s.begin(), y = *s.rbegin();
        if (ans > y[0] - x[0])ans = y[0] - x[0], range = {x[0], y[0]};
        else if (ans == y[0] - x[0])range = min(range, {x[0], y[0]});
        if (ptr[x[1]] == nums[x[1]].size())break;
        s.erase(s.find(x));
        s.insert({nums[x[1]][ptr[x[1]]], x[1]});
        ptr[x[1]]++;
    }
    return {range.first, range.second};
