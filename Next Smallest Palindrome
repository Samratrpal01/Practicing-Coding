Given a number, in the form of an array Num[] of size N containing digits from 1 to 9(inclusive). The task is to find the next smallest palindrome strictly larger than the given number.

Example 1:

Input:
N = 11
Num[] = {9, 4, 1, 8, 7, 9, 7, 8, 3, 2, 2}
Output: 9 4 1 8 8 0 8 8 1 4 9
Explanation: Next smallest palindrome is
94188088149.
Example 2:

Input:
N = 5
Num[] = {2, 3, 5, 4, 5}
Output: 2 3 6 3 2
Explanation: Next smallest palindrome is
23632.
Your Task:
Complete the function generateNextPalindrome() which takes an array num, and an single integer n, as input parameters and returns an array of integers denoting the answer. You don't to print answer or take inputs.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Codes Are:-
	vector<int> generateNextPalindrome(int arr[], int n) {
	    if(n ==1){
	        if(arr[0] >= 9 )
	            return {1 , 1 }; 
	       
	       return{arr[0] +=1};       
	    }

    vector<int>num; 
    for(int i = 0 ; i<n ; i++){
        num.push_back(arr[i]); 
    }
    
   
    int mid = n / 2;


    bool leftsmaller = false;

    // End of left side is always 'mid -1'
    int i = mid - 1;

    int j = (n % 2) ? mid + 1 : mid;

  
    while (i >= 0 && num[i] == num[j])
        i--, j++;

    if (i < 0 || num[i] < num[j])
        leftsmaller = true;

    // Copy the mirror of left to tight
    while (i >= 0)
    {
        num[j] = num[i];
        j++;
        i--;
    }

   
    if (leftsmaller == true)
    {
        int carry = 1;
        i = mid - 1;

       
        if (n % 2 == 1)
        {
            num[mid] += carry;
            carry = num[mid] / 10;
            num[mid] %= 10;
            j = mid + 1;
        }
        else
            j = mid;


        while (i >= 0)
        {
            num[i] += carry;
            carry = num[i] / 10;
            num[i] %= 10;
            
          
            num[j++] = num[i--]; 
        }

    }
        return num  ;
	    
	}
