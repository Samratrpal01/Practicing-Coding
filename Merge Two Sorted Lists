You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]

Codes Are:-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void insert(ListNode**head,int value){
        ListNode* temp=new ListNode(value);
        ListNode* ptr;
        if (*head == NULL)
            *head = temp;
        else {
             ptr = *head;
            while (ptr->next != NULL)
                ptr = ptr->next;
            ptr->next = temp;
        }
    }

    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* ans=NULL;
        vector<int>v;
        while(l1!=NULL){
            v.push_back(l1->val);
            l1=l1->next;
        }
        while(l2!=NULL){
            v.push_back(l2->val);
            l2=l2->next;
        }
        sort(v.begin(),v.end());
        
        for(int i=0;i<v.size();i++){
            insert(&ans, v[i]);
        }
        return ans;
    }
};
