Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, return the substring which occurs first ( with the least starting index ).


Example 1:

Input:
S = "aaaabbaa"
Output:
aabbaa
Explanation:
The longest palindrome string present in
the given string is "aabbaa".

Your Task:  
You don't need to read input or print anything. Your task is to complete the function longestPalindrome() which takes string S as input parameters and returns longest pallindrome present in string.


Expected Time Complexity: O(|S|2)
Expected Auxiliary Space: O(1)
Codes Are:-
string longestPalindrome(string S){
       int n=S.length();
        bool table[n][n];
        memset(table,0,sizeof(table));
        int maxlen=1,start=0,minstart=INT_MAX;
        
        for(int i=0;i<n;i++)
            table[i][i]=1;
                
        for(int i=0;i<n-1;i++)
        {
            if(S[i]==S[i+1])
            {
                table[i][i+1]=1;
                start=i;
                maxlen=2;
                minstart = min(minstart,start);
            }
        }
        for(int k=3;k<=n;k++)
        {
            for(int i=0;i<n-k+1;i++)
            {
                int j=k+i-1;
                if(table[i+1][j-1] && S[i]==S[j])
                {
                    table[i][j]=1;
                    if(k>maxlen)
                    {
                        maxlen = k;
                        start = i;
                    }
                }
            }
        }
        if(maxlen==1)
        {
            return S.substr(0,1);
        }
        if(maxlen==2)
        {
            return S.substr(minstart,maxlen);
        }
        return S.substr(start,maxlen);
    }
