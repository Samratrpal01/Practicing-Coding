Given a doubly linked list, rotate the linked list counter-clockwise by P nodes. Here P is a given positive integer and is smaller than the count of nodes(N) in a linked list.

Example 1:

Input: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 , P = 2
Output: 3 <-> 4 <-> 5 <-> 6 <-> 1 <-> 2
Explanation: Doubly linked list after rotating
2 nodes is: 3 4 5 6 1 2.
Example 2:

Input: 3 <-> 4 <-> 5 <-> 1 ,P = 4
Output: 3 <-> 4 <-> 5 <-> 1
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function rotateDLL() which takes head node of the linked list and an integer P as input parameters and returns the head node after rotating the linked list by P nodes.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Codes Are:-
Node *update(Node *start,int p)
    {
       Node *temp1=start;
       Node *temp2=start;
       while(temp1->next!=NULL){
           temp1=temp1->next;
       }
       temp1->next=start;
       start->prev=temp1;
       while(p--){
           start=start->next;
       }
      start->prev->next=NULL;
       start->prev=NULL;
       return start;
    }
