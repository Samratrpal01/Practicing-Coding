Given a non-negative number N in the form of string. The task is to apply at most one swap operation on the number N so that the result is just a previous possible number.

Note:  Leading zeros are not allowed.

 

Example 1:

Input :
S = "12435"
Output: 
12345
Explanation:
Although the number 12354 
will be the largest smaller 
number from 12435. But it is 
not possible to make it using 
only one swap. So swap 
4 and 3 and get 12345.
 

Example 2:

Input: 
S = " 12345"
Output: 
-1
Explanation:
Digits are in increasing order. 
So it is not possible to 
make a smaller number from it.
 

Your Task:

You don't need to read input or print anything. Your task is to complete the function previousNumber() which takes the string S and returns the previous number of S. If no such number exists return -1;

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Codes Are:-
string previousNumber(string str){
      int l=str.length();
	    int idx=-1;
	    
	    for(int i=l-2;i>=0;i--)
	    {
	        if( str[i] > str[i+1] )
	        {
	            idx=i;
	            break;
	        }
	    }
	    if(idx==-1)
	     return "-1";
	    else
	    {
	         int idx2=-1;
	         int maxdiff=INT_MAX;
	         for(int i=l-1;i>idx;i--)
	         {
	             if(str[i]<str[idx])
	             {
	                 int diff=str[idx]-'0'-str[i]-'0';
	                 if(diff<=maxdiff)
	                 {
	                     maxdiff=str[idx]-'0'-str[i]-'0';
	                     idx2=i;
	                 }
	             }
	         }
	         char ch=str[idx];
	         str[idx]=str[idx2];
	         str[idx2]=ch;
	         if(str[0]=='0')
	          return "-1";
	          //cout<<"-1"<<endl;
	         else
	         return str;
	         
	         //cout<<str<<endl;
	    }
    }
