Given a pattern containing only I's and D's. I for increasing and D for decreasing.
Devise an algorithm to print the minimum number following that pattern.
Digits from 1-9 and digits can't repeat.

 

Example 1:

Input:
D
Output:
21
Explanation:
D is meant for decreasing,
So we choose the minimum number
among 21,31,54,87,etc.
 

Example 2:

Input:
IIDDD
Output:
126543
Explanation:
Above example is self- explanatory,
1 < 2 < 6 > 5 > 4 > 3
  I - I - D - D - D
 

 

Your Task:

You don't need to read input or print anything. Your task is to complete the function printMinNumberForPattern() which takes the string S and returns a string containing the minimum number following the valid pattern.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Codes Are:-
string printMinNumberForPattern(string s){
        s='1'+s+'I';
        
        int n=s.size(),nextNum=2,countD=0;
        for(auto i=1;i<n;i++)
        {
            if(s[i]=='I')
            {
                reverse(s,i-countD-1,i-1);
                countD=0;
            }
            else
            countD++;
            s[i]=nextNum+'0';
            nextNum++;
            
            cout<<s<<endl;
        }
        s.pop_back();
        return s;
    }
    
    void reverse(string &s,int i,int j)
    {
        while(i<j)
        {
            swap(s[i],s[j]);
            i++;
            j--;
        }
    }
