Given a singly linked list L0 -> L1 -> â€¦ -> Ln-1 -> Ln. Rearrange the nodes in the list so that the new formed list is: L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2.

Input:
You have to complete the method which takes 1 argument: the head of the  linked list. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually.

Output:
Your function should return a pointer to the rearranged list so obtained.

User Task:
The task is to complete the function inPlace() which should rearrange the given linked list as required.

Constraints:
1 <=T<= 50
1 <= size of linked lists <= 100

Example:
Input:
2
4
1 2 3 4
5
1 2 3 4 5

Output:
1 4 2 3
1 5 2 4 3

Explanation:
Testcase 1: After rearranging the linked list as required, we have 1, 4, 2 and 3 as the elements of the linked list.

Code Are:-
#include<bits/stdc++.h>
Node *inPlace(Node *root)
{
    vector<int>v;
    Node* temp=root;
    while(temp)
    {
        v.push_back(temp->data);
        temp=temp->next;
        
    }
    
    temp=root;
    int n=v.size();
    int i=0;
    
    while(i<n/2)
    {
        temp->data=v[i];
        temp=temp->next;
        temp->data=v[n-i-1];
        temp=temp->next;
        i++;
    }
    
    if(n%2==1)
    {
        temp->data=v[n/2];
        temp=temp->next;
    }
    
    return root;
}

